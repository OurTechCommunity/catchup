#!/bin/sh

set -eu;

script_dir=$(dirname "${0}");
base_dir=$(realpath "${script_dir}/..");
summary_dir="${base_dir}/summary";

out_dir="${1:-build}";

echo "Building summary pages using Asciidoctor Jet...";

# Cleanup old builds
rm -rf "${out_dir}";
rm -f "${summary_dir}/autogenerated-combined-summary.adoc";

# Copy public files to output directory
cp -r "${base_dir}/public" "${out_dir}";
cp -r "${summary_dir}/static/img/" "${out_dir}/img/summary";

# Reverse order so summaries are newest to oldest
BUILD_SUMMARY_DIRS="";
for path in "${summary_dir}/sessions/"*; do
	if [ -d "${path}" ]; then
		BUILD_SUMMARY_DIRS="${path} ${BUILD_SUMMARY_DIRS}";
	fi;
done;

# Store all built catchups for quick lookup in edge functions
built_catchup_numbers="";

# Build individual summary pages
for path in ${BUILD_SUMMARY_DIRS}; do
	if [ ! -d "${path}" ]; then
		continue;
	fi;

	catchup_number=${path##*/};
	catchup_display_number=$(printf "%.0f" "${catchup_number}");

	# Unset catchup config variables
	unset catchup_config_noimage
	unset catchup_config_allow_multiple_images

	# Source config file, if it exists
	catchup_config_file="${summary_dir}/sessions/${catchup_number}/config";
	if [ -f "${catchup_config_file}" ]; then
		# shellcheck source=/dev/null
		. "${catchup_config_file}";
	fi

	# If summary/sessions/${catchup_number}/summary-template.adoc exists,
	# then use it, else use the default template
	summary_template="sessions/${catchup_number}/summary-template.adoc";
	if [ ! -f "${summary_dir}/${summary_template}" ]; then
		summary_template="summary-template.adoc";
	fi;

	# Use the first image named `${catchup_number}.*`
	catchup_no_image="";
	catchup_image_folder="${summary_dir}/static/img";
	catchup_image_extension="";
	for image in "${catchup_image_folder}/${catchup_number}."*; do
		if [ -f "${image}" ]; then
			if [ -z "${catchup_image_extension}" ]; then
				# remove `${catchup_image_folder}/${catchup_number}.` from path,
				# leaving only the extension
				catchup_image_extension=${image##*"${catchup_image_folder}"/"${catchup_number}".};
			elif [ "${catchup_config_allow_multiple_images:-}" != "1" ]; then
				echo "error: found multiple images for catchup #${catchup_number}";
				echo "please set 'catchup_config_allow_multiple_images=1' in ${catchup_config_file} to ignore subsequent images";
				exit 1;
			fi;
		fi;
	done;
	# image found AND catchup_config_noimage set
	if [ -n "${catchup_image_extension}" ] && [ -n "${catchup_config_noimage:-}" ]; then
		echo "error: found image for catchup ${catchup_number}, but 'catchup_config_noimage' set";
		echo "please unset 'catchup_config_noimage' in ${catchup_config_file}";
		exit 1;
	# else, image not found
	elif [ -z "${catchup_image_extension}" ]; then
		# if catchup_config_noimage is not set
		if [ -z "${catchup_config_noimage:-}" ]; then
			echo "error: could not find image for catchup #${catchup_number} in: ${catchup_image_folder}";
			echo "please set 'catchup_config_noimage=1' in ${catchup_config_file} if no image exists";
			exit 1;
		# else, set catchup_no_image=1
		else
			catchup_no_image="1";
		fi
	fi;

	# Generate author information
	committers=$(
		git log --format="Author: %an <%ae>%n%B" "${path}" |\
		(grep "^Author:\|^Co-authored-by:" || test $? = 1) |\
		cut -d " " -f 2-
	);

	_IFS="${IFS}";
	# Command substitution strips trailing newlines
	IFS="$(printf "\nx")";
	IFS="${IFS%x}";
	authors="";
	for contributor in ${committers}; do
		author_name="${contributor% <*>}";
		# Remove `{name} <`
		author_email="${contributor##* <}";
		# Remove trailing `>`
		author_email="${author_email%>}";

		# Canonicalize author entries
		author_entry="";
		case "${author_email}" in
			# skip dependabot
			"49699333+dependabot[bot]@users.noreply.github.com")
				continue;
			;;

			"alpeshbhagwatkar45@gmail.com")
				author_name="Alpesh Bhagwatkar";
			;;

			"83116240+anxkhn@users.noreply.github.com")
				author_email="anxkhn@duck.com";
			;;

			"darshandrander@gmail.com")
				author_name="Darshan Rander";
				author_email="hey@darshanrander.com";
			;;

			"lalwanidheeraj1234@gmail.com")
				author_name="Dheeraj Lalwani";
			;;

			"harshgkapadia@gmail.com")
				author_email="contact@harshkapadia.me";
			;;

			"shettymohitn@gmail.com"|"41548808+MHShetty@users.noreply.github.com")
				author_name="Mohit Shetty";
				author_email="shettymohitn@gmail.com";
			;;

			"52333791+mohitgangwani@users.noreply.github.com")
				author_email="mohit25032003@gmail.com";
			;;

			"42460270+SRKVRM@users.noreply.github.com")
				author_email="srthkvrm@gmail.com";
			;;

			"umaiyer@Umas-MacBook-Air.local"|"36669054+umaiyer1997@users.noreply.github.com")
				author_name="Uma Iyer";
				author_email="umahiyer@gmail.com";
			;;
		esac

		if [ -z "${author_entry}" ]; then
			author_entry="mailto:${author_email}[${author_name}]";
		fi

		case "${authors}" in
			"")
				authors="${author_entry}";
			;;

			# duplicate entry
			*"${author_entry}"*)
			;;

			*)
				authors="${authors} &#xB7; ${author_entry}";
			;;
		esac
	done
	IFS="${_IFS}";

	# Add template to combined summary page
	{
		echo ":catchup_number:          ${catchup_number}";
		echo ":catchup_display_number:  ${catchup_display_number}";
		echo ":catchup_image_extension: ${catchup_image_extension}";
		echo ":catchup_authors:         ${authors}";
		if [ -n "${catchup_no_image}" ]; then
			echo ":catchup_no_image:        ${catchup_no_image}";
		else
			echo ":!catchup_no_image:";
		fi
		echo "include::${summary_template}[]";
		echo "";
	} >> "${summary_dir}/autogenerated-combined-summary.adoc";

	asciidoctor \
		-a webfonts! \
		-a "catchup_number=${catchup_number}" \
		-a "catchup_display_number=${catchup_display_number}" \
		-a "catchup_image_extension=${catchup_image_extension}" \
		-a "catchup_authors=${authors}" \
		${catchup_no_image:+-a "catchup_no_image=1"} \
		-a "summary_file=${summary_template}" \
		-o "${out_dir}/summary/${catchup_display_number}.html" \
		"${summary_dir}/individual-summary.adoc";

	# Lazy load images
	sed -i -e "s/<img/<img loading=\"lazy\"/g" "${out_dir}/summary/${catchup_display_number}.html";

	# Add current summary to list of built catchups
	built_catchup_numbers="${built_catchup_numbers}\n  ${catchup_display_number},";
done;

# Save built catchup numbers to netlify functions folder
printf "export default [%b\n];\n" "${built_catchup_numbers}" \
	> "${base_dir}/netlify/edge-functions/common/built-catchup-numbers.ts";

# Build combined summary site
asciidoctor \
	-a webfonts! \
	-o "${out_dir}/summary/index.html" \
	"${summary_dir}/combined-summary.adoc";
# Lazy load images
sed -i -e 's/<img/<img loading="lazy"/g' "${out_dir}/summary/index.html";

echo "Summary pages build complete!";
echo;
